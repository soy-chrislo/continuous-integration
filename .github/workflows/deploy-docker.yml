name: Build and Push Docker Image to Docker Hub

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}
  USERNAME: soychrislo
  IMAGE_NAME: soychrislo/continuous-integration

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Build the Docker image
  #     run: docker-compose build --no-cache --force-rm 
  # test-docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Test the Docker image
        # run: docker-compose up -d 
  deploy-docker:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ env.USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  update-service:
    name: Update Docker Service
    needs: deploy-docker
    runs-on: [self-hosted, linux]
    steps:
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ env.USERNAME }} --password-stdin

      # - name: Pull the latest Docker image
      #   run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
      - name: Pull the latest Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Stop the current Docker container
        run: docker stop express-app || true # Reemplaza 'my-container' con el nombre/ID de tu contenedor actual

      - name: Remove the current Docker container
        run: docker rm express-app || true # Asegúrate de que esto no elimine tus datos si están en volúmenes o enlazados

      - name: Start the new Docker container
        run: |
          docker run -d \
          --name express-app \
          -p 80:3000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main